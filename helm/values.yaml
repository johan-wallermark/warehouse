replicaCount: 1

image:
  repository: demo/warehouse
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        backend:
          serviceName: chart-example.local
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


postgresql:
  persistence:
    enabled: false
  postgresqlUsername: postgres
  postgresqlPassword: secretpassword
  initdbScripts:
    db.sql: |
      CREATE DATABASE warehouse;

      \c warehouse;

      CREATE TABLE IF NOT EXISTS articles(
      id SERIAL PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      stock INT NOT NULL
      CHECK (stock >= 0)
      );

      CREATE TABLE IF NOT EXISTS products(
      id SERIAL PRIMARY KEY,
      name VARCHAR(100) NOT NULL UNIQUE,
      price INT NOT NULL
      );

      CREATE TABLE IF NOT EXISTS products_articles(
      art_id INTEGER REFERENCES articles(id),
      prod_id INTEGER REFERENCES products(id),
      art_quantity INT NOT NULL,
      UNIQUE (art_id, prod_id)
      );
